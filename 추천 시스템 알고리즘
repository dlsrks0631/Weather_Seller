# 일단 정윤님 강원도 코드에 추가했습니다.
# 이런 식으로 입력해서 하면 어떨까 해서 올립니다.
# 콘텐츠 기반 필터링 추가합니다.
# 자신이 가지고 있는 예산을 바탕으로 추천해주는 알고리즘도 개발 중입니다.

import pandas as pd
import numpy as np
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import MinMaxScaler

# 데이터 불러오기 

# 지역이름을 바꾸셔야 해당이름으로 csv파일이 생성됩니다.
name = "강원도"

# 제가 올린 파일을 입력하면 지역별로 데이터 전처리가 가능합니다.
df = pd.read_csv(r"C:\Users\mypc\Desktop\캡스톤\롯데카드내역_지역(원본)\강원도_data.csv", encoding = 'UTF-8')


# 결측치 처리
# 결측치를 처리해 본 결과 결측치가 없지만, 
#지금 결측치처리는 결측치 처리 전후의 검증이 없고 처리 대상이 전체 데이터셋이 아니라 특정 열(sl_am)만 처리해서 
#전체 데이터를 처리하고 처리 전후 검증할 수 있는 코드로 변경했습니다

# 각 열의 결측치 개수를 확인합니다.
missing_values = df.isnull().sum()

# 결측치가 하나라도 있는 경우에만 처리를 수행합니다.
if missing_values.any():
    # SimpleImputer 객체를 생성합니다. 여기서는 'median' 전략을 사용합니다.
    imputer = SimpleImputer(strategy='median')
    
    # 결측치를 중앙값으로 대체합니다.
    df_filled = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)
    
    # 대체된 데이터 프레임의 결측치를 다시 확인합니다.
    if df_filled.isnull().sum().any():
        print("결측치가 여전히 존재합니다.")
    else:
        print("모든 결측치가 처리되었습니다.")
        # 결측치가 처리된 데이터 프레임을 반환하거나 저장합니다.
        df = df_filled
else:
    print("결측치가 없습니다.")


# 이상치 처리 (IQR 사용)
# 지금 코드처럼 전체 데이터에서 총결제금액에서만 이상치를 검출하는 것보다 업종에 따른 총결제금액의 이상치를 검출하는 것이 좋을 것 같아서 변경했습니다.
# 제가 데이터들의 표준편차(std)와 평균값(mean)를 비교한 결과로 20개의 업종 모두 평균값보다 표준편차가 크므로 데이터가 넓게 분포함을 알수 있습니다.
# 이는 정규분포를 보이는 데이터에 적합한 Z-score보다 비정규 분포를 보이는 데이터에 알맞은 IQR규칙을 사용하는 것이 낫다고 판단하여 변경하였습니다.

# 이 코드는 결제업종에 따른 총결제금액의 이상치를 처리하는 코드입니다.

# 결과를 저장할 DataFrame을 준비합니다.
filtered_df = pd.DataFrame()

# 결제업종의 유니크한 값을 가져옵니다.
unique_categories = df['결제업종'].unique()

for category in unique_categories:
    # 각 결제업종에 해당하는 데이터만 추출합니다.
    category_data = df[df['결제업종'] == category]
    
     # 해당 데이터의 총결제금액의 Q1, Q3 및 IQR을 계산합니다.
    Q1 = category_data['총결제금액'].quantile(0.25)
    Q3 = category_data['총결제금액'].quantile(0.75)
    IQR = Q3 - Q1
    
    # IQR 규칙에 따라 이상치를 필터링합니다.
    filtered_category_data = category_data[~((category_data['총결제금액'] < (Q1 - 1.5 * IQR)) |
                                            (category_data['총결제금액'] > (Q3 + 1.5 * IQR)))]
    
    # 필터링된 데이터를 결과 DataFrame에 추가합니다.
    filtered_df = pd.concat([filtered_df, filtered_category_data], axis=0)

# 필터링된 데이터를 새로운 CSV 파일로 저장합니다.
# name = 지역이름
filtered_df.to_csv(f"{name}_filtered.csv", index=False)


# 이상치처리된 파일읽기
data = pd.read_csv(f"{name}_filtered.csv", encoding = 'utf-8')


# 정규화 (RobustScaler 사용)
# 원래 코드에는 StandardScaler로 정규화를 하고 있는데 이 방법은 데이터가 정규분포에 가까울때 좋다는 gpt의 말과 
# 데이터를 이상치 처리했기 때문에 평균과 표준편차의 값이 많이 차이 나지 않지만 제가 검사해본 결과
# 여전히 평균 값보다 큰 표준편차를 가진 업종들이 있기 때문에 RobustScaler로 변경했습니다 

# 궁금한 점이 결제업종은 스케일링 하지 못했는데 (RobustScaler는 string을 스케일링 못함)
# 그럼 업종은 나중에 인공지능학습 기계학습? 할 때 다른 feature 값들과 연관되어 값을 도출해낼 수 있나요?
# 아직 기계학습 부분은 공부를 못해서,,, 이 부분을 모르겠네요

# 선택한 특성들에 대해서만 스케일링합니다.
features_to_scale = ['성별', '연령대','결혼유무','자녀유무','거주지일치여부','총결제금액','결제개수']

# RobustScaler 인스턴스를 생성합니다.
scaler = RobustScaler()

# 데이터를 스케일링합니다. fit_transform 메소드를 사용하면 됩니다.
# 선택된 특성만 스케일링
data[features_to_scale] = scaler.fit_transform(data[features_to_scale])

# 스케일링된 데이터를 새 CSV 파일로 저장합니다.
data.to_csv(f"{name}_scaled_data.csv", index=False)

# 특정 업종들만 필터링
cuisine_types = ['한식', '중식', '양식', '일식']
df_filtered = df[df['결제업종'].isin(cuisine_types)]

# 개인 정보 입력
gender = input("성별을 입력하세요 (1: 남성, 2: 여성): ")
age_range = input("연령대를 입력하세요 (예: 2, 3, 4...): ")
marital_status = input("결혼 유무를 입력하세요 (0: 미혼, 1: 기혼): ")
children = input("자녀 유무를 입력하세요 (0: 없음, 1: 있음): ")
residence_match = input("거주지 일치 여부를 입력하세요 (0: 일치하지 않음, 1: 일치): ")

# 입력받은 사용자 정보를 기반으로 데이터 필터링
user_filtered = df_filtered[
    (df_filtered['성별'] == int(gender)) &
    (df_filtered['연령대'] == int(age_range)) &
    (df_filtered['결혼유무'] == int(marital_status)) &
    (df_filtered['자녀유무'] == int(children)) &
    (df_filtered['거주지일치여부'] == int(residence_match))
]

# 사용자의 과거 결제 데이터를 기반으로 가장 선호하는 업종 찾기
user_preferences = df_filtered.groupby('결제업종')['총결제금액'].sum().sort_values(ascending=False)
top_cuisine_preference = user_preferences.index[0] if not user_preferences.empty else None

# 결제 시각별로 그룹화하고, 각 업종별로 총 결제 금액을 집계합니다.
popular_times = df_filtered.groupby(['결제시각', '결제업종'])['총결제금액'].sum().reset_index()

def recommend_popular_category(current_hour, top_cuisine_preference):
    global recommendation_made  # 전역 변수로 선언

    try:
        current_hour = int(current_hour)
        assert 0 <= current_hour <= 10  # 10시간으로 설정
    except (ValueError, AssertionError):
        print("잘못된 시간 형식입니다. 0-10 사이의 숫자를 입력해주세요.")
        return
    
    current_time_data = popular_times[popular_times['결제시각'] == current_hour]

    if top_cuisine_preference and not current_time_data.empty:
        if top_cuisine_preference in current_time_data['결제업종'].values:
            print(f"현재 시각 {current_hour}시에 기반하여, 과거 선호 데이터에 따라 추천하는 업종: {top_cuisine_preference}")
            recommendation_made = True  # 추천이 이루어짐
        else:
            most_popular = current_time_data.loc[current_time_data['총결제금액'].idxmax()]
            print(f"현재 시각 {current_hour}시에 추천하는 업종: {most_popular['결제업종']}")
            recommendation_made = True  # 추천이 이루어짐
    else:
        print("해당 시각에 데이터가 없거나 사용자 선호 데이터가 없습니다.")

# 현재 시각을 입력받아서 추천을 실행합니다. 
current_hour = input("현재 시각을 입력하세요 (0-10 사이의 숫자): ")
recommendation_made = False  # 추천이 이루어졌는지를 추적하는 변수 초기화
recommend_popular_category(current_hour, top_cuisine_preference)

if not recommendation_made:
    all_profiles = df_filtered.groupby('결제업종')['총결제금액'].sum().reset_index()

    scaler = MinMaxScaler()
    all_profiles_scaled = all_profiles.copy()
    all_profiles_scaled['총결제금액'] = scaler.fit_transform(all_profiles[['총결제금액']])

    def calculate_similarity(user_pref, all_prof_scaled):
        all_prof_scaled['similarity'] = all_prof_scaled.apply(
            lambda row: -np.sqrt((user_pref - row['총결제금액']) ** 2),
            axis=1
        )
        return all_prof_scaled

    user_profile_value = user_preferences[top_cuisine_preference] if top_cuisine_preference else 0
    all_profiles_similarity = calculate_similarity(user_profile_value, all_profiles_scaled)

    def recommend_similar_categories(similar_categories, top_cuisine_preference):
        if top_cuisine_preference:
            similar_categories = similar_categories[similar_categories['결제업종'] != top_cuisine_preference]
        recommended_category = similar_categories.sort_values(by='similarity', ascending=False).head(1)
        return recommended_category

    similar_categories = recommend_similar_categories(all_profiles_similarity, top_cuisine_preference)
    if not similar_categories.empty:
        category_name = similar_categories.iloc[0]['결제업종']
        print(f"귀하와 유사한 속성을 가진 다른 업종으로 '{category_name}'을(를) 추천합니다.")
    else:
        print("추천할 유사한 업종이 없습니다.")
